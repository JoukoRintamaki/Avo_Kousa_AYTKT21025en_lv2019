apiVersion: v1
items:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
      creationTimestamp: null
      labels:
      name: backend-example-docker
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: backend-example-docker
      strategy: {}
      template:
        metadata:
          annotations:
          creationTimestamp: null
          labels:
            app: backend-example-docker
        spec:
          containers:
            - env:
                - name: DB_HOST
                  value: postgres-devopswithdocker2019.postgres.database.azure.com
                - name: DB_PASSWORD
                  value: z4R25sru
                - name: DB_USERNAME
                  value: postgres@postgres-devopswithdocker2019.postgres.database.azure.com
                - name: DB_NAME
                  value: postgres
                - name: REDIS
                  value: redis
              image: joukorintamaki/backend-example-docker
              name: backend-example-docker
              ports:
                - containerPort: 8000
          restartPolicy: Always
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
      creationTimestamp: null
      labels:
      name: backend-example-docker
    spec:
      ports:
        - name: "8000"
          port: 8000
          targetPort: 8000
      selector:
       app: backend-example-docker
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
      creationTimestamp: null
      labels:
      name: frontend-example-docker
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: frontend-example-docker
      strategy: {}
      template:
        metadata:
          annotations:
          creationTimestamp: null
          labels:
            app: frontend-example-docker
        spec:
          containers:
            - image: joukorintamaki/frontend-example-docker
              name: frontend-example-docker
              ports:
                - containerPort: 5000
          restartPolicy: Always
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
      creationTimestamp: null
      labels:
      name: frontend-example-docker
    spec:
      ports:
        - name: "5000"
          port: 5000
          targetPort: 5000
      selector:
       app: frontend-example-docker
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
      creationTimestamp: null
      labels:
      name: redis
    spec:
      replicas: 1
      selector:
        matchLabels:
          apps: redis
      strategy: {}
      template:
        metadata:
          annotations:
          creationTimestamp: null
          labels:
            apps: redis
        spec:
          containers:
            - image: redis:alpine
              name: redis
              ports:
                - containerPort: 6379
          restartPolicy: Always
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
      creationTimestamp: null
      labels:
      name: redis
    spec:
      ports:
        - name: "6379"
          port: 6379
          targetPort: 6379
      selector:
        app: redis
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
      creationTimestamp: null
      labels:
      name: nginxservice
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: nginxservice
      strategy: {}
      template:
        metadata:
          annotations:
          creationTimestamp: null
          labels:
            app: nginxservice
        spec:
          containers:
            - env:
                - name: NGINX_PORT
                  value: "80"
              image: joukorintamaki/nginxservice
              name: nginxservice
              ports:
                - containerPort: 80
          restartPolicy: Always
    status: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
      creationTimestamp: null
      labels:
      name: nginxservice
    spec:
      type: LoadBalancer
      ports:
        - name: "80"
          port: 80
          targetPort: 80
      selector:
        app: nginxservice
    status:
      loadBalancer: {}
kind: List
metadata: {}
